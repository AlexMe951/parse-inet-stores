День 1

Гит:
	1. Склонить репо к себе (git clone)
	2. Сделать себе ветку (git checkout -b имя_ветки)
	3. Запустить сервис и проверить, что он работает (при обращении на http://localhost:8080/parse/auchan/categories
	   выдается большой список ссылок на разные места в каталоге ашана)
	4. Закодить то, что нужно (часть из Спринг MVC)
	5. Закоммитить то, что сделал (git commit -a), внятно и коротко описывая, что сделал, как будто кратко поясняешь
	   себе через года три, что это за коммит
	6. Запушить в гит-хаб локальную ветку вместе с изменениями (git push)
	7. Сделать пулл-реквест для мерджа изменений в мастер (можно через гит-хаб, не помню команду гита)
	8. В мастер ничего не пушить (!), только через пулл-реквесты

Спринг MVC
Сделать дополнительный эндпойнт, чтобы можно было указывать в пути какую инит-страницу.
 Например обращение к контроллеру через /parse/auchan/categories/ptica-myaso  запускало в сервисе парсинг
 на странице https://www.auchan.ru/catalog/ptica-myaso/ , обращение через /parse/auchan/categories/hlebnaya-vypechka
 запускало парсинг на странице https://www.auchan.ru/catalog/hlebnaya-vypechka и т.д. Понятно, все это через один эндпойнт
 (при помощи @PathVariable)


 День 2

 1. Установить постгрес, если еще нет. Юзера и пароль создать.
 2. Заменить зависимость на h2 на зависимость на постгрес (закоментить/раскомментить в pom.xml)
 3. Добавить в application.properties проперти для реального постгреса
 4. Создать нужную таблицу с тремя полями, если хибер сам ее не создаст.
 5. Сделать пару вызовов, проверить гетом, что в базе что-то есть.
 6. Подключить свой постгрес как датасорс к идеевскому инструменту для баз данных
 7* задача. Сделать в репозитории метод List<CatalogLink> findAllByLinkUrl(String linkUrl), сделать под него эндпойнт
  (точку входа через рест-запрос), сначала записать в базу что-то через уже сделанные эндпойнты, потом найти через
  этот самый новый эндпойнт "GET parse/auchan/cataloglinks/{linkUrl}";
 8** сделать еще таблицу, связанную с CatalogLink, разметить

 День 3

 1. Попробовать большинство из нижеперечисленного
 2. Идея - очень крутая штука. Главное правило - если вы что-то коряво делаете, вы не знаете нужного кейборд-шортката
 3. Для начала - навигация. Esc. ctrl - b, alt - down, ctrl-shift-b, F2 / shift - F2, ctrl - shift - bsps, alt - F7,
 4. Абсолютный чемпион - ctrl - e. Все убрать, поставить одно окно. ctrl - shift - F12
 5. Рефакторинг. ctrl - f6, shift - f6, alt - ctrl - n (показать, как поменять один метод на другой быстро). alt - ctrl - v / c / m, alt - ctrl - shift - t
 6. Поиск везде. ctrl - n, ctrl - shift - n, ctrl - f + f3 / shift - f3, ctrl - shift - f / r. Поиск / замена через регэкспы.
 7. Выделения, текст, строки. ctrl - w, shift - ctrl - w, ctrl - y, ctrl - d, ctrl - shift - up / down, ctrl - shift - u, ctrl - alt - j
 8. alt - ctrl - l, alt - ctrl - o
 9. ctrl - t, ctrl - k, ctrl - shift - k, view annotate
 10. alt - 1, alt - 9, alt - 4, alt - 5
 11. code templates, class templates, .new, sout, iter, alt - ctrl - v, ctrl - shift - enter
 12. ctrl - shift - t
 13. git - shelf changes, different change lists, local history
 14. alt - enter, alt - enter (2x), shift - shift. поиск везде, если начать печатать.
 15. debugging, datagrep, http - editor, inject languages

 День 4

 0. (по желанию, хорошо бы). Попробовать сделать 1-2-несколько средних заданий на джавараше,
 сначала написав под них тесты, потом код (TDD). Там у вас не будет возможности подключить JUnit с ассертами,
 напишите свои простые ассерты, это несложно.
 1. Разобраться, как устроен Element и Elements классы, как это хранится, как можно вытащить из
 них линки каталогов (на примере уже имеющегося парсинга), как можно вытащить линки /product/,
 понять, что есть элементы, в которых есть другие элементы.
 2. Сделать кусок бизнес-логики:
 2.1. Выделить отдельно сервис ExtractProductLinksService - сервис, который будет вытаскивать уникальные линки
  на конкретные продукты (вида /product/) из полученного объекта Elements.
 2.2. По TDD (test first, code second) сделать этот сервис. Примерный (неполный) состав тестов -
  когда поступает один нужный элемент, когда поступающий элементс не содержит нужных ссылок, когда нужный линк
  внутри элемента внутри другого элемента, еще чего-нибудь.
 3. (задание со звездочкой, необязательное, намного важнее первые сделать как можно лучше).
  В основном сервисе (тоже по TDD).
   Получить список каталог линков.
   Пройтись по ним.
   Для конечных элементов (которые не содержат в себе других элементов)
     Вытащить еще каталог линки, если их не было в исходной коллекции
     Вытащить все линки вида /product/ (т.е. линки на страницы конкретных продуктов) при помощи нового
       сервиса ExtractProductLinksService (заавтовайрив его).
   Для элементов - контейнеров повторить рекурсивно. Задача - вытащить все продуктовые линки.
   Можно разумно выделить отдельные сервисы, если понятно, что функционал ощутимо отличается.

 Главное - single responsibility (т.е. отдельный класс, методы хорошо разделены и структурированы) и с тестами.

 День 6

 0. Еще раз повторить дерево исключений. Чем checked exceptions не устраивают, почему от них отказываются.
 Что делает sneakythrows ломбока. Как вызвать OutOfMemoryError и StackOverflowError.
 В случае, когда в коде есть исключительная ситуация, сделайте свой тип исключения в пакете exception/b..l..e..,
   наследующий от моего исключения.
 1. Мне - добавить таблицы в дб касающиеся цен (единицы измерения, типы цен, сам парсинг цен), вернуть функционал
  сервиса, http реквесты актуализировать.
 2. Рома - имплементить CategoryDatabaseSearchServiceImpl. Заинжектить нужные репо, сделать тесты с моками этих репо,
 добавить методы в репо при необходимости. Можно вручную добавить в базу записи, чтобы тестировать.
 3. Серега - заимплементить ParseCategoryLinksServiceImpl (приоритет) и ParseProductLinksServiceImpl.
  Заинжектить нужные сервисы, сделать тесты.
